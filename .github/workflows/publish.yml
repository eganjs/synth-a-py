# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
name: publish
on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch: {}
jobs:
  publish:
    needs: []
    name: publish / ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os:
          - ubuntu
        python-version:
          - "3.8"
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys;
          print('-'.join(str(v) for v in sys.version_info))")
      - name: install Poetry using bash
        if: matrix.os == 'ubuntu' || matrix.os == 'macos'
        run: >-
          curl -sSL
          https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          | python

          echo "::add-path::$HOME/.poetry/bin"
      - name: install Poetry using pwsh
        if: matrix.os == 'windows'
        run: >-
          (Invoke-WebRequest -Uri
          https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          -UseBasicParsing).Content | python

          echo "::add-path::$HOME/.poetry/bin"
      - name: set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{
            hashFiles('**/poetry.lock') }}
      - name: ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: get tag
        id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: build dist
        run: make dist
      - name: check tag matches version
        run: ls dist/synth-a-py-${{ steps.tag.outputs.tag }}.tar.gz
          dist/synth-a-py-0.1.0.tar.gz dist/synth_a_py-${{ steps.tag.outputs.tag
          }}-py3-none-any.whl dist/synth_a_py-0.1.0-py3-none-any.whl
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
      - name: upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/synth-a-py-0.1.0.tar.gz
          asset_name: synth-a-py-0.1.0.tar.gz
          asset_content_type: application/gzip
      - name: publish to pypi
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: make publish
