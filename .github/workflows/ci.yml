# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
name: ci
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  lint:
    needs: []
    name: lint / ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os:
          - ubuntu
        python-version:
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys;
          print('-'.join(str(v) for v in sys.version_info))")
      - name: install Poetry using bash
        if: matrix.os == 'ubuntu' || matrix.os == 'macos'
        run: >-
          curl -sSL
          https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          | python

          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: install Poetry using pwsh
        if: matrix.os == 'windows'
        run: >-
          (Invoke-WebRequest -Uri
          https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          -UseBasicParsing).Content | python

          echo "$HOME/.poetry/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{
            hashFiles('**/poetry.lock') }}
      - name: ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: lint
        run: make lint
  test:
    needs:
      - lint
    name: test / ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys;
          print('-'.join(str(v) for v in sys.version_info))")
      - name: install Poetry using bash
        if: matrix.os == 'ubuntu' || matrix.os == 'macos'
        run: >-
          curl -sSL
          https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          | python

          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: install Poetry using pwsh
        if: matrix.os == 'windows'
        run: >-
          (Invoke-WebRequest -Uri
          https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          -UseBasicParsing).Content | python

          echo "$HOME/.poetry/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{
            hashFiles('**/poetry.lock') }}
      - name: ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: test
        run: make test
  dependabot-automerge:
    if: github.actor == 'dependabot[bot]'
    needs:
      - lint
      - test
    name: dependabot-automerge
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |-
            github.pullRequests.createReview({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE'
            })
            github.pullRequests.merge({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              pull_number: context.payload.pull_request.number
            })
